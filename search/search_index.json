{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Personal documentation for random things I've learned","text":""},{"location":"#reason-for-creation","title":"Reason for creation","text":"<p>This is just going to be an amalgamation of all the things that I have learned. It will also act as a prototype for a documentation system that I am working on.</p>"},{"location":"#languages-i-use","title":"Languages I use","text":"<ul> <li>Python</li> <li>Javascript</li> <li>Lua</li> <li>C/C++ (I rarely use this)</li> <li>Java (I rarely use this)</li> <li>Bash</li> <li>HTML/CSS</li> </ul>"},{"location":"python/about/","title":"About","text":""},{"location":"python/about/#brief-introduction","title":"Brief introduction","text":"<p>Python is a multi-pardgimed, dynamically typed and general purpose language. It was built on top of C yet it's run time is still slow due to the fact that it is:</p> <ul> <li>Dynamically typed</li> <li>Uses garbage collection</li> <li>Interpreted rather than compiled</li> </ul>"},{"location":"python/about/#main-uses-for-python","title":"Main uses for Python","text":"<p>Due to its general purpose nature, Python can be used for almost any context. Though it does well in:</p> <ul> <li>AI/ML</li> <li>Fullstack Web development</li> <li>Data analytics</li> </ul> <p>It also uses virtual environments to install packages in an isolated manner (not affecting the overall system).</p>"},{"location":"python/pyenv/","title":"Pyenv","text":""},{"location":"python/pyenv/#introduction-to-pyenv","title":"Introduction to Pyenv","text":"<p>Pyenv is a tool used to work with various versions of Python. Documentation on the full installation can be found here.</p>"},{"location":"python/pyenv/#installation","title":"Installation","text":""},{"location":"python/pyenv/#installation-through-github","title":"Installation through Github","text":"<p>I will show how to install <code>pyenv</code> for through their github:</p> <ol> <li> <p>First clone the repo into your home directory under a hidden file:</p> <pre><code>git clone https://github.com/pyenv/pyenv.git ~/.pyenv\n</code></pre> </li> <li> <p>You can also compile this dynamic bash extension to speed up the command. Don't worry if it does not work though:</p> <pre><code>cd ~/.pyenv &amp;&amp; src/configure &amp;&amp; make -C src\n</code></pre> </li> <li> <p>Now add this to your <code>~/.bashrc</code>:</p> <pre><code>echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' &gt;&gt; ~/.bashrc\necho 'command -v pyenv &gt;/dev/null || export PATH=\"$PYENV_ROOT/bin:$PATH\"' &gt;&gt; ~/.bashrc\necho 'eval \"$(pyenv init -)\"' &gt;&gt; ~/.bashrc\n</code></pre> </li> <li> <p>Now if you have either <code>~/.bash_profile</code> or <code>~/.profile</code> add this:</p> <pre><code># ~/.profile\necho 'export PYENV_ROOT=\"$HOME/.pyenv\"' &gt;&gt; ~/.profile\necho 'command -v pyenv &gt;/dev/null || export PATH=\"$PYENV_ROOT/bin:$PATH\"' &gt;&gt; ~/.profile\necho 'eval \"$(pyenv init -)\"' &gt;&gt; ~/.profile\n</code></pre> <pre><code># ~/.bash_profile\necho 'export PYENV_ROOT=\"$HOME/.pyenv\"' &gt;&gt; ~/.bash_profile\necho 'command -v pyenv &gt;/dev/null || export PATH=\"$PYENV_ROOT/bin:$PATH\"' &gt;&gt; ~/.bash_profile\necho 'eval \"$(pyenv init -)\"' &gt;&gt; ~/.bash_profile\n</code></pre> </li> <li> <p>Restart your shell:</p> <pre><code>exec \"$SHELL\"\n</code></pre> <p>or</p> <pre><code>source ~/.bashrc\n</code></pre> </li> </ol>"},{"location":"python/pyenv/#installation-through-homebrew","title":"Installation through Homebrew","text":"<p>The only prerequisite is that you have Homebrew:</p> <ol> <li> <p>Firstly run:</p> <pre><code>brew update\nbrew install pyenv\n</code></pre> </li> <li> <p>Assuming you have Hombrew you are probably using a Mac so run (If not check their github for other shell environments):</p> <pre><code>echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' &gt;&gt; ~/.zshrc\necho 'command -v pyenv &gt;/dev/null || export PATH=\"$PYENV_ROOT/bin:$PATH\"' &gt;&gt; ~/.zshrc\necho 'eval \"$(pyenv init -)\"' &gt;&gt; ~/.zshrc\n</code></pre> </li> <li> <p>Now run:</p> <pre><code>alias brew='env PATH=\"${PATH//$(pyenv root)\\/shims:/}\" brew'\n</code></pre> </li> <li> <p>Also restart your shell:</p> <pre><code>exec \"$SHELL\"\n</code></pre> <p>or</p> <pre><code>source ~/.zshrc\n</code></pre> </li> </ol>"},{"location":"python/virtual_environments/about/","title":"About","text":""},{"location":"python/virtual_environments/about/#virtual-environments","title":"Virtual environments","text":"<p>A virtual environment allows an isolated use of package installation for each and every project.</p>"},{"location":"python/virtual_environments/about/#use-for-virtual-environment","title":"Use for virtual environment","text":"<p>As projects require specific versions of certain packages, a problem can occur when working on multiple projects. If you were to install version 1.0 of a package globally for one project but another required version 0.9 this would cause clashs when trying to run projects.</p>"},{"location":"python/virtual_environments/about/#specific-to-python","title":"Specific to Python","text":"<p>There are two main virtual environments for Python:</p> <ol> <li><code>Virtualenv</code> (for pip)</li> <li><code>Conda</code> (for conda)<ol> <li><code>Mamba</code> (faster but newer implementation of conda)</li> </ol> </li> </ol>"},{"location":"python/virtual_environments/anaconda/","title":"Anaconda","text":""},{"location":"python/virtual_environments/anaconda/#where-to-find-for-conclusive-and-official-documentation","title":"Where to find for conclusive and official documentation","text":"<p>Check the official docs for installations. This mainly covers setup.</p>"},{"location":"python/virtual_environments/anaconda/#setting-up-a-virtual-environment","title":"Setting up a virtual environment","text":"<p>You need to have anaconda installed and added to your path on your terminal. Then you can set it up in your terminal:</p> <pre><code>conda create -n example_env\nconda activate\n</code></pre>"},{"location":"python/virtual_environments/anaconda/#installing-packages","title":"Installing packages","text":"<p>Installing packages is relatively simple you just:</p> <pre><code>conda install anaconda-docs\n</code></pre>"},{"location":"python/virtual_environments/anaconda/#uninstalling-packages","title":"Uninstalling packages","text":"<p>Uninstalling packages is similar, you just:</p> <pre><code>conda remove anaconda-docs\n</code></pre>"},{"location":"python/virtual_environments/anaconda/#removing-your-virtual-environment","title":"Removing your virtual environment","text":"<p>Make sure you have deactivated your environment then:</p> <pre><code>conda deactivate\nconda remove --name example_env --all\n</code></pre> <ul> <li>The <code>--name</code> flag specifies the anaconda environment name</li> <li>The <code>--all</code> specifies the removal of all packages within that environment</li> </ul>"},{"location":"python/virtual_environments/anaconda/#mamba","title":"Mamba","text":"<p>Mamba is a reimplimentation of Anaconda using C++. This was intended to speed up resolution speeds compared to Anaconda. This is newer, but if you do get stuck with Anaconda, you can use this as an alternative. Documentation on mamba can be found here.</p>"},{"location":"python/virtual_environments/anaconda/#basic-usage","title":"Basic usage","text":"<p>Make sure you have deactivated your environment then:</p> <pre><code>conda create -n mamba_environment -c conda-forge mamba\nconda activate mamba_environment\n(mamba_environment) mamba create -n new-environment -c &lt;channel&gt; &lt;packages-to-install&gt;\n\n# Run 'mamba init' to be able to run mamba activate/deactivate\n# and start a new shell session. Or use conda to activate/deactivate.\n\n# (mamba_environment) $ mamba init\n# (mamba_environment) $ source ~/.bashrc\n\n(mamba_environment) mamba activate new-environment\n</code></pre>"},{"location":"python/virtual_environments/virtualenv/","title":"Virtualenv","text":""},{"location":"python/virtual_environments/virtualenv/#where-to-find-for-conclusive-and-official-documentation","title":"Where to find for conclusive and official documentation","text":"<p>Check the official docs for installations. This mainly covers setup.</p>"},{"location":"python/virtual_environments/virtualenv/#setting-up-virtual-environment","title":"Setting up virtual environment","text":"<p>You need to have Python and <code>virtualenv</code> set up. Then in your terminal:</p> <pre><code>virtualenv venv\nsource venv/bin/activate\n</code></pre>"},{"location":"python/virtual_environments/virtualenv/#installing-packages","title":"Installing packages","text":"<p>Installing packages is relatively simple you just:</p> <pre><code>pip install mkdocs\n</code></pre>"},{"location":"python/virtual_environments/virtualenv/#uninstalling-packages","title":"Uninstalling packages","text":"<p>Uninstalling packages is similar, you just:</p> <pre><code>pip uninstall mkdocs\n</code></pre>"},{"location":"python/virtual_environments/virtualenv/#removing-your-virtual-environment","title":"Removing your virtual environment","text":"<p>Make sure to deactivate your environment then:</p> <pre><code>deactivate\nrm -rf venv\n</code></pre> <ul> <li><code>-rf</code> removes all files within the <code>venv</code> folder recursively and force the removal</li> </ul>"}]}